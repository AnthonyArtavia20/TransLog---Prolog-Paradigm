:- include('Data_Base.pl').

% Verificar si existe un lenguaje
existe_lenguaje(X) :-
    lenguaje(X, _).

% Caso para dieciseis - diecinueve (español -> inglés)
generar_traduccion_compuesta(P, Traduccion) :-
    sub_string(P, 0, 5, RestoLen, "dieci"),
    RestoLen > 0,
    sub_string(P, 5, RestoLen, 0, Resto),
    trad(Resto, TradResto),
    combinar_strings(TradResto, "teen", Traduccion).

% Caso mejorado para inglés -> español
generar_traduccion_compuesta(P, Traduccion):-
    sub_string(P, _, 4, 0, "teen"),
    string_length(P, Len),
    Len > 4,
    SubLen is Len - 4,
    sub_string(P, 0, SubLen, 4, Resto),
    mapear_raiz_teen(Resto, RaizEspanol),
    combinar_strings("dieci", RaizEspanol, Traduccion).


% Caso para veintiuno - veintinueve (español -> inglés)
generar_traduccion_compuesta(P, Traduccion) :-
    sub_string(P, 0, 6, RestoLen, "veinti"),
    RestoLen > 0,
    sub_string(P, 6, RestoLen, 0, Resto),
    trad(Resto, TradResto),
    combinar_strings("twenty", TradResto, Traduccion).

% Mapeo completo de raíces teen a español
mapear_raiz_teen("thir", "tre").
mapear_raiz_teen("four", "cua").
mapear_raiz_teen("fif", "quin").
mapear_raiz_teen("six", "seis").
mapear_raiz_teen("seven", "siete").
mapear_raiz_teen("eigh", "diecio").
mapear_raiz_teen("nine", "nueve").

% Para casos regulares que coinciden con traducciones existentes
mapear_raiz_teen(Resto, RaizEspanol) :-
    trad(TradResto, Resto),
    RaizEspanol = TradResto.


% Función auxiliar para combinar strings
combinar_strings(String1, String2, Resultado) :-
    string_concat(String1, String2, Resultado).

% Separar texto en palabras
separar(Texto, Palabras) :-
    split_string(Texto, " ", "", Palabras).

% Traducción individual
traducir(X, K):-
    K == 1,
    (trad(Y, X) ; generar_traduccion_compuesta(X, Y)),
    write(Y),
    write(' '),
    !.

traducir(X, K):-
    K == 2,
    (trad(X, Y) ; generar_traduccion_compuesta(X, Y)),
    write(Y),  !.

traducir(X, _):-
    write(X),
    write(" ").

% Lógica principal de procesamiento
mostrar_palabras(Lista, K) :-
    mostrar_palabras_aux(Lista, K).

%casos para numeros como Ochenta y ocho
mostrar_palabras_aux([Palabra, "y", Palabra2|Resto], K) :-
    K == 2,
    num(Palabra),
    num(Palabra2),
    mostrar_palabras_aux([Palabra2|Resto], K),
    traducir(Palabra, K).

%caso para cuando se escribe we are/nosotros somos
mostrar_palabras_aux([Palabra, "are", Palabra2|Resto], K):-
    K == 1,
    Palabra2 == "we",
    write("nosotros somos "),
    mostrar_palabras_aux(Resto, K),
    traducir(Palabra, K).

mostrar_palabras_aux([Palabra, "somos", Palabra2|Resto], K):-
    K == 2,
    Palabra2 == "nosotros",
    write("we are "),
    mostrar_palabras_aux(Resto, K),
    traducir(Palabra, K).



%casos para cuando se escribe they are/ellos son
mostrar_palabras_aux([Palabra, "are" |Resto], K):-
    K == 1,
    Palabra == "they",
    write("ellos son "),
    mostrar_palabras_aux(Resto, K).

mostrar_palabras_aux([Palabra, "son", Palabra2|Resto], K):-
    K == 2,
    Palabra2 == "ellos",
    write("they are "),
    traducir(Palabra, K),
    mostrar_palabras_aux(Resto, K).

%caso para mi singular/ my singular
mostrar_palabras_aux([ "my", Palabra|Resto], K):-
    K == 1,
    sing(Palabra),
    write("mi "),
    traducir(Palabra, K),
    mostrar_palabras_aux(Resto, K).


%caso para mis plural/ my plural
mostrar_palabras_aux(["my", Palabra|Resto], K):-
    K == 1,
    plur(Palabra),
    write("mis "),
    traducir(Palabra, K),
    mostrar_palabras_aux(Resto, K).



mostrar_palabras_aux([Palabra|Resto], K) :-
    traducir(Palabra, K),
    mostrar_palabras_aux(Resto, K).

mostrar_palabras_aux([], _).
